@page
@model SurfProject.Pages.MarineAPIModel
@{
    ViewData["Title"] = "MarineAPI";
}

<br />

<div>Return to Member <a asp-page="/MemberPage" asp-route-id="@Model.SurfProfile.MemberID">Home Page</a></div>

<br />

<h2>Upcoming conditions for @Model.SurfProfile.Location which match your criteria</h2>

<br />

@if (Model.FilteredList.Count > 0)
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Day</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Wave Height</th>
                    <th>Swell Direction</th>
                    <th>Period</th>
                    <th>Wind Speed</th>
                    <th>Wind Direction</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.FilteredList.Count(); i++)
                {
                    <tr>
                        <td>@Model.FilteredList[i].GetDate(Model.FilteredList[i].LocalTimestamp).DayOfWeek</td>

                        <td>@Model.FilteredList[i].GetDate(Model.FilteredList[i].LocalTimestamp).ToShortDateString()</td>

                        <td>@Model.FilteredList[i].GetDate(Model.FilteredList[i].LocalTimestamp).ToShortTimeString()</td>

                        <td>
                            @Model.FilteredList[i].Swell.GetAverageWaveHeight(Model.FilteredList[i].Swell.MinBreakingHeight,
          Model.FilteredList[i].Swell.MaxBreakingHeight) @Model.FilteredList[i].Swell.Unit
    </td>

    <td>@Model.FilteredList[i].Swell.Components.Primary.CompassDirection</td>

    <td>@Model.FilteredList[i].Swell.Components.Primary.Period</td>

    <td>@Model.FilteredList[i].Wind.Speed @Model.FilteredList[i].Wind.Unit</td>

    <td>@Model.FilteredList[i].Wind.CompassDirection</td>
</tr>

}
            </tbody>
        </table>
    </div>


}

<div>
    @if (Model.TempData["Message"] != null)
    {@Model.TempData["Message"]}
</div>


<br />


<h2>These are the members whose surf profiles are also a match over the coming 24 hours for @Model.SurfProfile.Location</h2>


@if (Model.PeersDictionary.Count == 0)
{
    <div>
        No matches for next 24 hours
    </div>
}


@if (Model.PeersDictionary.Count > 0)
{
    <div class="table-responsive">

        <table class="table">

            <thead>
                <tr>
                    <th>Day</th>
                    <th>Date</th>
                    <th>Time</th>

                    @for (int i = 0; i < Model.MembersList; i++)
                    {
                        <th>Member ID</th>
                    }

                </tr>
            </thead>
            <tbody>

                    @foreach (var keyValue in Model.PeersDictionary)
                    {
                        //I use a random rootObject item to allow me to access GetDate method

                    <tr>
                        <td>
                            @Model.RootObjectList[0].GetDate(keyValue.Key).DayOfWeek
                        </td>

                        <td>
                            @Model.RootObjectList[0].GetDate(keyValue.Key).ToShortDateString()
                        </td>

                        <td>
                            @Model.RootObjectList[0].GetDate(keyValue.Key).ToShortTimeString()
                        </td>

                       
                        @foreach (var profile in keyValue.Value)
                        {
                            <td>
                                @profile.MemberID.ToString()
                            </td>
                        }

                    </tr>
                }

                </tbody>
            </table>
        </div>

    }

@if (Model.AllMembers.Count > 0)
{
    <label for="sendTo">Send To</label>

    <select id="selectedID" name="sendTo">

        @foreach (var m in Model.AllMembers)
        {
            <option>@m.MemberID</option>
        }

    </select>

    <input type="hidden" id="senderMemberID" value=@Model.SurfProfile.MemberID />

    <input type="text" id="textMessage" />

    <button type="button" id="btnPostMessage">Send Message</button>

}

<br />

@if (Model.MyMessages.Count > 0)
{
    <h3>My Messages</h3>


    <div id="div1" class="table-responsive">

        <table class="table">

            <thead>
                <tr>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Sender ID</th>
                    <th>Message</th>
                </tr>
            </thead>

            <tbody>

                @for (int i = Model.MyMessages.Count - 1; i + 1 > 0; i--)
                {
                    <tr>
                        <td>
                            @Model.RootObjectList[0].GetDate(Model.MyMessages[i].MessageTime).ToShortDateString()
                        </td>

                        <td>
                            @Model.RootObjectList[0].GetDate(Model.MyMessages[i].MessageTime).ToShortTimeString()
                        </td>

                        <td>
                            @Model.MyMessages[i].SenderID
                        </td>

                        <td>
                            @Model.MyMessages[i].MessageBody
                        </td>
                    </tr>
                }

            </tbody>

        </table>

    </div>



}


@section scripts
    {
    <script src="~/js/JavaScript.js"></script>}


